\ProvidesPackage{non-decimal-units}[2020/10/04 Macros for displaying and manipulating historical non-decimal units]

% License: CC-BY-SA 4.0
% Author: Mikkel Eide Eriksen <mikkel.eriksen@gmail.com>

\RequirePackage{pgfkeys}
\RequirePackage{pgfopts}
\RequirePackage{bigintcalc}

\RequirePackage{etoolbox}
\RequirePackage{ifthen}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pgfkeys{/handlers/.store in cs/.code=\pgfkeysalso{%
	\pgfkeyscurrentpath/.code=\csdef{#1}{##1}}%
}

\def\nduset{\pgfqkeys{/non-decimal-units}}

\newif\ifndushowvalues
\newif\ifndushowsymbols
\newif\ifndutreatzeroasnil
\newif\ifndualigned
\ndushowvaluestrue
\ndushowsymbolstrue

\gdef\ndu@nextdelim{}%
\gdef\ndu@delim{}%

\nduset{
	show/.is choice,
	show/values/.code={\ndushowvaluestrue\ndushowsymbolsfalse},
	show/values and symbols/.code={\ndushowvaluestrue\ndushowsymbolstrue},
	show/symbols/.code={\ndushowvaluesfalse\ndushowsymbolstrue},
	show=values and symbols,
	cell width/.store in cs=ndu@cell@width,
	cell width=5em,
	add to variable/.code={%
		\csdef{ndu@current@variable}{#1}%
		\csdef{ndu@current@operator}{+}%
	},
	subtract from variable/.code={%
		\csdef{ndu@current@variable}{#1}%
		\csdef{ndu@current@operator}{-}%
	},
	replace nil with/.store in cs=ndu@nil@replacement,
	treat zero as nil/.is if=ndutreatzeroasnil,
	treat zero as nil=false,
	aligned/.is if=ndualigned,
	aligned=false,
}

\newcommand\nduNewUnit[2]{%
	% #1 = unit name
	% #2 = further key/value pairs
	\csdef{ndu@#1@segments}{0}%
	\nduset{
		#1/.search also={/non-decimal-units},
		#1/.cd,
		segment separator/.store in cs=ndu@#1@unit@separator,
		segment separator={~}, % default
		create macro named/.code={%
			\nduNewMacro{#1}{##1}%
		},
		restrict segment depth/.store in cs=ndu@#1@restrict@segment@depth,
		segments/.code={%
			\nduBuildSegments{#1}{##1}%
		},
	}%
	\nduNewUnit@segment{#1}{0}%
	\nduNewUnit@segment{#1}{1}%
	\nduNewUnit@segment{#1}{2}%
	\nduNewUnit@segment{#1}{3}%
	\nduNewUnit@segment{#1}{4}%
	\nduset{#1/.cd,#2}%
}

\newcommand\nduCommonSymbols[1]{%
	\nduset{
		common symbols/.unknown/.code={%
			\csxdef{ndu@common@symbols@\pgfkeyscurrentname}{##1}%
		},
		common symbols/.cd,
		#1,
	}%
}

\newcommand\nduCommonFactors[1]{%
	\nduset{
		common factors/.unknown/.code args={##1 per ##2}{%
			\csxdef{ndu@common@factors@##2@\pgfkeyscurrentname}{##1}%
			%\csshow{ndu@common@factors@##2@\pgfkeyscurrentname}%
		},
		common factors/.cd,
		#1,
	}%
}

\newcommand\nduBuildSegments@internal[6]{%
	\nduset{%
		#1/.cd,
		segment 0/name=#2,
		segment 1/name=#3,
		segment 2/name=#4,
		segment 3/name=#5,
		segment 4/name=#6,
	}%
}

\NewDocumentCommand\nduBuildSegments{ m > { \SplitArgument { 4 } { . } } m }{%
	\nduBuildSegments@internal{#1}#2%
}

\newcommand\ndu@update@segment@count[2]{%
	% #1 = unit name
	% #2 = number of segments
	\ifnum#2>\csuse{ndu@#1@segments}%
		\csdef{ndu@#1@segments}{#2}%
	\fi%
}

\newcommand\nduNewUnit@segment[2]{%
	\nduset{
		#1/segment #2/.cd,
		name/.code={%
			\IfValueT{##1}{%
				\csdef{ndu@#1@segment #2@name}{##1}%
				\ndu@update@segment@count{#1}{#2}%
			}%
		},
		symbol/.store in cs=ndu@#1@segment #2@symbol,
		display/.code 2 args={%
			% #1 = prefix
			% #2 = suffix
			\csdef{ndu@#1@segment #2@prefix}{##1}%
			\csdef{ndu@#1@segment #2@suffix}{##2}%
		},
		display={}{ \nduSym}, % default
		factor/.store in cs=ndu@#1@segment #2@factor,
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\ndu@if@segment@at@least[3]{%
	\ifcsvoid{ndu@#1@restrict@segment@depth}{%
		\csedef{ndu@segment@count}{\csuse{ndu@#1@segments}}%
	}{%
		\csedef{ndu@segment@count}{\csuse{ndu@#1@restrict@segment@depth}}%
	}%
	\ifnum#2>\ndu@segment@count%
		\relax%
	\else%
		#3%
	\fi%
}

\newcommand\ndu@nil@helper[4]{%
	\IfValueTF{#1}{%
		\ifblank{#1}{%
			\ifcsvoid{ndu@nil@replacement}{}{#2\ndu@nil@replacement{}#4}%
		}{%
			\ifndutreatzeroasnil%
				\expandafter\ifnum#1=0
					\ifcsvoid{ndu@nil@replacement}{}{#2\csuse{ndu@nil@replacement}#4}%
				\else%
					#2#3#4%
				\fi%
			\else%
				#2#3#4%
			\fi%
		}%
	}{%
		\ifcsvoid{ndu@nil@replacement}{}{#2\csuse{ndu@nil@replacement}#4}%
	}%
}

\newcommand\nduFactor[2]{%
	\nduPrepFactor{#1}{#2}%
	\csuse{ndu@#1@segment #2@factor}%
}

\newcommand\nduName[2]{%
	\csuse{ndu@#1@segment #2@name}%
}

\newcommand\nduSymbol[2]{%
	\csuse{ndu@#1@segment #2@symbol}%
}

\newcommand\ndu@get@symbol[2]{%
	\ifcsvoid{ndu@#1@segment #2@symbol}{%
		% fall back to common symbol
		%\csshow{ndu@common@symbols@\csuse{ndu@#1@segment #2@name}}%
		\csuse{ndu@common@symbols@\csuse{ndu@#1@segment #2@name}}%
	}{%
		\csuse{ndu@#1@segment #2@symbol}%
	}%
}

\NewDocumentCommand\nduNewMacro{ m O{} m }{%
	\expandafter\NewDocumentCommand\csname#3\endcsname { O{} m } {%
		\begingroup%
		\nduset{#1/.cd,#2}%
		\nduValue{#1}[##1]{##2}%
		\endgroup%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\nduFormatSegment[3]{%
	% #1 = unit name
	% #2 = segment
	% #3 = value
	\gdef\nduSym{\ndu@get@symbol{#1}{#2}}%
	%\csshow{nduSym}%
	\ndu@nil@helper{#3}{%
		\ndu@delim%
		\ifndushowsymbols\csuse{ndu@#1@segment #2@prefix}\fi%
		\edef\ndu@delim{\ndu@nextdelim}%
	}{%
		\ifndushowvalues#3\fi%
	}{%
		\ifndushowsymbols\csuse{ndu@#1@segment #2@suffix}\fi%
	}%
}

\newcommand\nduFormatValue@helper[3]{%
	\ndu@if@segment@at@least{#1}{#2}{%
		\nduFormatSegment{#1}{#2}{#3}%
	}%
}

\newcommand\nduFormatValue@internal[6]{%
	% #1 = unit name
	% #2-6 = values
	\edef\ndu@nextdelim{\csuse{ndu@#1@unit@separator}}%
	\edef\ndu@delim{}%
	\nduFormatValue@helper{#1}{0}{#2}%
	\nduFormatValue@helper{#1}{1}{#3}%
	\nduFormatValue@helper{#1}{2}{#4}%
	\nduFormatValue@helper{#1}{3}{#5}%
	\nduFormatValue@helper{#1}{4}{#6}%
}

\NewDocumentCommand\nduFormatValue@entry{ m > { \SplitArgument { 4 } { . } } m }{%
	% #1 = unit name
	% #2 = values joined by .
	\nduFormatValue@internal{#1}#2%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand*{\ndu@minwidthbox}[2]{%
	\makebox[{\ifdim#1<\width\width\else#1\fi}][r]{%
		#2%
	}%
}

\newcommand\nduAlignedHeader@helper[2]{%
	\ndu@if@segment@at@least{#1}{#2}{\ndu@minwidthbox{\ndu@cell@width}{%
		\ndu@get@symbol{#1}{#2}%
	}}%
}

\newcommand\nduAlignedValue@helper[3]{%
	\ndu@if@segment@at@least{#1}{#2}{\ndu@minwidthbox{\ndu@cell@width}{\nduFormatSegment{#1}{#2}{#3}}}%
}

\newcommand\nduAlignedValue@internal[6]{%
	% #1 = unit name
	% #2-6 = values
	\nduAlignedValue@helper{#1}{0}{#2}%
	\nduAlignedValue@helper{#1}{1}{#3}%
	\nduAlignedValue@helper{#1}{2}{#4}%
	\nduAlignedValue@helper{#1}{3}{#5}%
	\nduAlignedValue@helper{#1}{4}{#6}%
}

\NewDocumentCommand\nduHeader{ m O{} }{%
	\begingroup%
	\nduset{#1/.cd,#2}%
	\nduAlignedHeader@helper{#1}{0}%
	\nduAlignedHeader@helper{#1}{1}%
	\nduAlignedHeader@helper{#1}{2}%
	\nduAlignedHeader@helper{#1}{3}%
	\nduAlignedHeader@helper{#1}{4}%
	\endgroup%
}

\NewDocumentCommand\nduAlignedValue@entry{ m > { \SplitArgument { 4 } { . } } m }{%
	% #1 = unit name
	% #2 = values joined by .
	\begingroup%
	\nduset{show=values}%
	\nduAlignedValue@internal{#1}#2%
	\endgroup%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\NewDocumentCommand\nduValue{ m O{} m }{%
	% #1 = unit name
	% #2 = options
	% #3 = values joined by .
	\begingroup%
	\nduset{#1/.cd,#2}%
	\ifndualigned%
		\nduAlignedValue@entry{#1}{#3}%
	\else%
		\nduFormatValue@entry{#1}{#3}%
	\fi%
	\endgroup%
	\ifcsvoid{ndu@current@variable}{}{%
		\nduMath{#1}{\ndu@current@variable}{\ndu@current@operator}{#3}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\nduPrepFactor[2]{%
	\ifcsvoid{ndu@#1@segment #2@factor}{%
		\ifcsvoid{ndu@common@factors@\nduName{#1}{#2}@\nduName{#1}{\the\numexpr#2+1\relax}}{%
			\csxdef{ndu@#1@segment #2@factor}{1}%
		}{%
			\csxdef{ndu@#1@segment #2@factor}{\csuse{ndu@common@factors@\nduName{#1}{#2}@\nduName{#1}{\the\numexpr#2+1\relax}}}%
		}%
	}{}%
}

\newcommand\nduConvertToRepr@helper[5]{%
	% #1 = unit name
	% #2 = repr name
	% #3 = current segment
	% #4 = sub segment
	% #5 = value
	\ndu@if@segment@at@least{#1}{#3}{%
		\nduPrepFactor{#1}{#3}%
		\IfValueTF{#5}{%
			\ifblank{#5}{%
				\def\ndu@val@to@add{0}%
			}{%
				\edef\ndu@val@to@add{#5}%
			}%
		}{%
			\def\ndu@val@to@add{0}%
		}%
		\csxdef{ndu@repr@#2}{\bigintcalcAdd{\csuse{ndu@repr@#2}}{\ndu@val@to@add}}%
		\csxdef{ndu@repr@#2}{\bigintcalcMul{\csuse{ndu@repr@#2}}{\csuse{ndu@#1@segment #3@factor}}}%
	}%
}

\newcommand\nduConvertToRepr@internal[7]{%
	% #1 = unit name
	% #2 = repr name
	% #3-7 = values
	\csdef{ndu@repr@#2}{0}%
	\nduConvertToRepr@helper{#1}{#2}{0}{1}{#3}%
	\nduConvertToRepr@helper{#1}{#2}{1}{2}{#4}%
	\nduConvertToRepr@helper{#1}{#2}{2}{3}{#5}%
	\nduConvertToRepr@helper{#1}{#2}{3}{4}{#6}%
	\nduConvertToRepr@helper{#1}{#2}{4}{}{#7}%
}

\NewDocumentCommand\nduConvertToRepr{ m O{} m > { \SplitArgument { 4 } { . } } m }{%
	\nduset{#1/.cd,#2}%
	\nduConvertToRepr@internal{#1}{#3}#4%
}

\newcommand\nduFormatRepr@helper[4]{%
	% Vi = mod(R, Fj)
	% R = div(R - Vi, Fj)
	% #1 = unit name
	% #2 = repr name
	% #3 = current segment (i)
	% #4 = super segment (j)
	\ifblank{#4}{%
		\csxdef{ndu@repr@#2@result@#3}{\csuse{ndu@repr@#2}}%
	}{%
		\ndu@if@segment@at@least{#1}{#4}{%
			\nduPrepFactor{#1}{#4}%
			\csxdef{ndu@repr@#2@result@#3}{\bigintcalcMod{\csuse{ndu@repr@#2}}{\csuse{ndu@#1@segment #4@factor}}}%
			\csxdef{ndu@repr@#2}{\bigintcalcDiv{\bigintcalcSub{\csuse{ndu@repr@#2}}{\csuse{ndu@repr@#2@result@#3}}}{\csuse{ndu@#1@segment #4@factor}}}%
		}%
	}%
}

\NewDocumentCommand\nduResult{ m O{} m }{%
	% #1 = unit name
	% #2 = options
	% #3 = repr name
	\csdef{ndu@repr@tmp #3}{\csuse{ndu@repr@#3}}%
	\nduFormatRepr@helper{#1}{tmp #3}{4}{3}%
	\nduFormatRepr@helper{#1}{tmp #3}{3}{2}%
	\nduFormatRepr@helper{#1}{tmp #3}{2}{1}%
	\nduFormatRepr@helper{#1}{tmp #3}{1}{0}%
	\nduFormatRepr@helper{#1}{tmp #3}{0}{}%
	\edef\ndu@nextdelim{\csuse{ndu@#1@unit@separator}}%
	\edef\ndu@delim{}%
	\begingroup%
	\ifndualigned%
		\nduset{show=values,#1/.cd,#2}%
		\nduAlignedValue@helper{#1}{0}{\csuse{ndu@repr@tmp #3@result@0}}%
		\nduAlignedValue@helper{#1}{1}{\csuse{ndu@repr@tmp #3@result@1}}%
		\nduAlignedValue@helper{#1}{2}{\csuse{ndu@repr@tmp #3@result@2}}%
		\nduAlignedValue@helper{#1}{3}{\csuse{ndu@repr@tmp #3@result@3}}%
		\nduAlignedValue@helper{#1}{4}{\csuse{ndu@repr@tmp #3@result@4}}%
	\else%
		\nduset{#1/.cd,#2}%
		\nduFormatValue@helper{#1}{0}{\csuse{ndu@repr@tmp #3@result@0}}%
		\nduFormatValue@helper{#1}{1}{\csuse{ndu@repr@tmp #3@result@1}}%
		\nduFormatValue@helper{#1}{2}{\csuse{ndu@repr@tmp #3@result@2}}%
		\nduFormatValue@helper{#1}{3}{\csuse{ndu@repr@tmp #3@result@3}}%
		\nduFormatValue@helper{#1}{4}{\csuse{ndu@repr@tmp #3@result@4}}%
	\fi%
	\endgroup%
}

\newcommand\nduMath[4]{%
	% #1 = unit name
	% #2 = repr name
	% #3 = operator
	% #4 = value
	\ifcsvoid{ndu@repr@#2}{\csxdef{ndu@repr@#2}{0}}{}%
	\ifthenelse{\equal{#3}{+}}{%
		\nduConvertToRepr{#1}{tmp #2}{#4}%
		\csxdef{ndu@repr@#2}{\bigintcalcAdd{\csuse{ndu@repr@#2}}{\csuse{ndu@repr@tmp #2}}}%
	}{%
		\ifthenelse{\equal{#3}{-}}{%
			\nduConvertToRepr{#1}{tmp #2}{#4}%
			\csxdef{ndu@repr@#2}{\bigintcalcSub{\csuse{ndu@repr@#2}}{\csuse{ndu@repr@tmp #2}}}%
		}{%
			\ifthenelse{\equal{#3}{*}}{%
				\csxdef{ndu@repr@#2}{\bigintcalcMul{\csuse{ndu@repr@#2}}{#4}}%
			}{%
				\ifthenelse{\equal{#3}{/}}{%
					\csxdef{ndu@repr@#2}{\bigintcalcDiv{\csuse{ndu@repr@#2}}{#4}}%
				}{%
					\PackageError{non-decimal-units}{Unrecognized math operator: #3}{Only + - * / are allowed.}%
				}%
			}%
		}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\nduset{
	options/.cd,
	british/.code={\input{non-decimal-units.british}},
	danish/.code={\input{non-decimal-units.danish}},
}

\ProcessPgfPackageOptions{/non-decimal-units/options}
