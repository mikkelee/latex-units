\ProvidesPackage{non-decimal-units}[2020/10/04 Macros for displaying and manipulating historical non-decimal units]

% License: CC-BY-SA 4.0
% Author: Mikkel Eide Eriksen <mikkel.eriksen@gmail.com>

\RequirePackage{pgfkeys}
\RequirePackage{pgfopts}
\RequirePackage{bigintcalc}

\RequirePackage{etoolbox}
\RequirePackage{ifthen}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pgfkeys{/handlers/.store in cs/.code=\pgfkeysalso{%
	\pgfkeyscurrentpath/.code=\csdef{#1}{##1}}%
}

\def\nduset{\pgfqkeys{/ndu}}

\newif\ifndushowvalues
\newif\ifndushowsymbols
\newif\ifndutreatzeroasnil
\newif\ifndualigned
\ndushowvaluestrue
\ndushowsymbolstrue

\gdef\ndu@nextdelim{}%
\gdef\ndu@delim{}%

\nduset{%
	base units/.unknown/.code={%
		\expandafter\nduBuildBaseUnitKeys\expandafter{\pgfkeyscurrentname}%
	},
	unit groups/.unknown/.code={%
		\expandafter\nduBuildUnitGroupKeys\expandafter{\pgfkeyscurrentname}{#1}%
	},
	show/.is choice,
	show/values/.code={\ndushowvaluestrue\ndushowsymbolsfalse},
	show/values and symbols/.code={\ndushowvaluestrue\ndushowsymbolstrue},
	show/symbols/.code={\ndushowvaluesfalse\ndushowsymbolstrue},
	show=values and symbols,
	cell width/.initial=5em,
	add to variable/.code={%
		\csdef{ndu@current@variable}{#1}%
		\csdef{ndu@current@operator}{+}%
	},
	subtract from variable/.code={%
		\csdef{ndu@current@variable}{#1}%
		\csdef{ndu@current@operator}{-}%
	},
	replace nil with/.store in cs=ndu@nil@replacement,
	treat zero as nil/.is if=ndutreatzeroasnil,
	treat zero as nil=false,
	aligned/.is if=ndualigned,
	aligned=false,
	set aligned for environment/.code={%
		\AtBeginEnvironment{#1}{\nduset{aligned}}%
	},
}

\newcommand\nduBuildBaseUnitKeys[1]{% called by .unknown handler
	\nduset{%
		base units/#1/.cd,
		symbol/.initial={#1},
		factor/.code args={##1 per ##2}{%
			\pgfkeysalso{%
				##2/factors/#1/.initial=##1,
			}%
		},
		prefix/.initial={},
		suffix/.initial={~\nduSym},
		display/.style 2 args={%
			prefix={##1},
			suffix={##2},
		},
	}%
}

\newcommand\nduBaseUnits[1]{%
	\nduset{%
		base units/.cd,
		#1,
	}%
}

\newcommand\nduBuildUnitGroupKeys[2]{% called by .unknown handler
	\csdef{ndu@#1@segments}{0}%
	\nduset{%
		unit groups/#1/.search also={/ndu},
		unit groups/#1/.cd,
		segment separator/.initial={~},
		restrict segment depth/.store in cs=ndu@#1@restrict@segment@depth,
		macro/.code={%
			\nduNewMacro{#1}{##1}%
		},
	}%
	\nduBuildSegments{#1}{#2}%
}

\newcommand\nduUnitGroups[1]{%
	\nduset{%
		unit groups/.cd,
		#1,
	}%
}

\NewDocumentCommand\nduBuildSegments{ m > { \SplitArgument { 6 } { . } } m }{%
	\nduBuildSegments@internal{#1}#2%
}

\newcommand\nduBuildSegments@internal[8]{%
	\nduNewUnit@segment{#1}{0}{#2}%
	\nduNewUnit@segment{#1}{1}{#3}%
	\nduNewUnit@segment{#1}{2}{#4}%
	\nduNewUnit@segment{#1}{3}{#5}%
	\nduNewUnit@segment{#1}{4}{#6}%
	\nduNewUnit@segment{#1}{5}{#7}%
	\nduNewUnit@segment{#1}{6}{#8}%
}

\newcommand\nduNewUnit@segment[3]{%
	\IfValueT{#3}{%
		\nduset{
			unit groups/#1/segment #2/.cd,
			name/.initial=#3,
			symbol/.link=/ndu/base units/#3/symbol,
			prefix/.link=/ndu/base units/#3/prefix,
			suffix/.link=/ndu/base units/#3/suffix,
			display/.style 2 args={%
				segment #2/prefix={##1}, % why is the segment needed here ???
				segment #2/suffix={##2},
			},
		}
		\ndu@update@segment@count{#1}{#2}%
	}%
}

\newcommand\ndu@update@segment@count[2]{%
	% #1 = unit name
	% #2 = number of segments
	\ifnum#2>\csuse{ndu@#1@segments}%
		\csdef{ndu@#1@segments}{#2}%
	\fi%
}

\NewDocumentCommand\nduNewMacro{ m O{} m }{%
	\expandafter\NewDocumentCommand\csname#3\endcsname { O{} m } {%
		\begingroup%
		\nduset{unit groups/#1/.cd,#2}%
		\nduValue{#1}[##1]{##2}%
		\endgroup%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\nduName[2]{%
	\pgfkeysifdefined{/ndu/unit groups/#1/segment #2/name}{%
		\pgfkeysvalueof{/ndu/unit groups/#1/segment #2/name}%
	}{}%
}

\newcommand\nduSymbol[2]{%
	\pgfkeysifdefined{/ndu/unit groups/#1/segment #2/symbol}{%
		\pgfkeysvalueof{/ndu/unit groups/#1/segment #2/symbol}%
	}{%
		\PackageError{non-decimal-units}{No symbol defined for "#1" segment #2 (\nduName{#1}{#2})}{}%
		\nduSymbolMissing%
	}%
}

\newcommand\nduPrefix[2]{%
	\pgfkeysifdefined{/ndu/unit groups/#1/segment #2/prefix}{%
		\gdef\nduSym{\nduSymbol{#1}{#2}}%
		\pgfkeysvalueof{/ndu/unit groups/#1/segment #2/prefix}%
	}{%
		\PackageError{non-decimal-units}{No prefix defined for "#1" segment #2 (\nduName{#1}{#2})}{}%
		\nduSymbolMissing%
	}%
}

\newcommand\nduSuffix[2]{%
	\pgfkeysifdefined{/ndu/unit groups/#1/segment #2/suffix}{%
		\gdef\nduSym{\nduSymbol{#1}{#2}}%
		\pgfkeysvalueof{/ndu/unit groups/#1/segment #2/suffix}%
	}{%
		\PackageError{non-decimal-units}{No suffix defined for "#1" segment #2 (\nduName{#1}{#2})}{}%
		\nduSymbolMissing%
	}%
}

\newcommand\nduFactor[2]{%
	\pgfkeysifdefined{/ndu/unit groups/#1/segment #2/factor}{%
		\pgfkeysvalueof{/ndu/unit groups/#1/segment #2/factor}%
	}{%
		\pgfkeysifdefined{/ndu/base units/\nduName{#1}{\the\numexpr#2-1\relax}/factors/\nduName{#1}{#2}}{%
			\pgfkeysvalueof{/ndu/base units/\nduName{#1}{\the\numexpr#2-1\relax}/factors/\nduName{#1}{#2}}%
		}{%
			1%
		}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\ndu@if@segment@at@least[3]{%
	\ifcsvoid{ndu@#1@restrict@segment@depth}{%
		\edef\ndu@tmp@count{\csuse{ndu@#1@segments}}%
	}{%
		\edef\ndu@tmp@count{\csuse{ndu@#1@restrict@segment@depth}}%
	}%
	\ifnum#2>\ndu@tmp@count%
		\relax%
	\else%
		#3%
	\fi%
}

\newcommand\ndu@nil@helper[4]{%
	\IfValueTF{#1}{%
		\ifblank{#1}{%
			\ifcsvoid{ndu@nil@replacement}{}{#2\ndu@nil@replacement{}#4}%
		}{%
			\ifndutreatzeroasnil%
				\expandafter\ifnum#1=0
					\ifcsvoid{ndu@nil@replacement}{}{#2\csuse{ndu@nil@replacement}#4}%
				\else%
					#2#3#4%
				\fi%
			\else%
				#2#3#4%
			\fi%
		}%
	}{%
		\ifcsvoid{ndu@nil@replacement}{}{#2\csuse{ndu@nil@replacement}#4}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\NewDocumentCommand\nduValue{ m O{} m }{%
	% #1 = unit name
	% #2 = options
	% #3 = values joined by .
	\begingroup%
	\nduset{unit groups/#1/.cd,#2}%
	\ifndualigned%
		\nduAlignedValue@entry{#1}{#3}%
	\else%
		\nduFormatValue@entry{#1}{#3}%
	\fi%
	\endgroup%
	\ifcsvoid{ndu@current@variable}{}{%
		\nduMath{#1}{\ndu@current@variable}{\ndu@current@operator}{#3}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\nduFormatSegment[3]{%
	% #1 = unit name
	% #2 = segment
	% #3 = value
	%\csshow{nduSym}%
	\ndu@nil@helper{#3}{%
		\ndu@delim%
		\ifndushowsymbols\nduPrefix{#1}{#2}\fi%
		\edef\ndu@delim{\ndu@nextdelim}%
	}{%
		\ifndushowvalues#3\fi%
	}{%
		\ifndushowsymbols\nduSuffix{#1}{#2}\fi%
	}%
}

\newcommand\nduFormatValue@helper[3]{%
	\ndu@if@segment@at@least{#1}{#2}{%
		\nduFormatSegment{#1}{#2}{#3}%
	}%
}

\newcommand\nduFormatValue@internal[8]{%
	% #1 = unit name
	% #2-8 = values
	\edef\ndu@nextdelim{\pgfkeysvalueof{/ndu/unit groups/#1/segment separator}}%
	\edef\ndu@delim{}%
	\nduFormatValue@helper{#1}{0}{#2}%
	\nduFormatValue@helper{#1}{1}{#3}%
	\nduFormatValue@helper{#1}{2}{#4}%
	\nduFormatValue@helper{#1}{3}{#5}%
	\nduFormatValue@helper{#1}{4}{#6}%
	\nduFormatValue@helper{#1}{5}{#7}%
	\nduFormatValue@helper{#1}{6}{#8}%
}

\NewDocumentCommand\nduFormatValue@entry{ m > { \SplitArgument { 6 } { . } } m }{%
	% #1 = unit name
	% #2 = values joined by .
	\nduFormatValue@internal{#1}#2%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand*{\ndu@minwidthbox}[2]{%
	\makebox[{\ifdim#1<\width\width\else#1\fi}][r]{%
		#2%
	}%
}

\newcommand\nduAlignedHeader@helper[2]{%
	\ndu@if@segment@at@least{#1}{#2}{\ndu@minwidthbox{\pgfkeysvalueof{/ndu/cell width}}{%
		\nduSymbol{#1}{#2}%
	}}%
}

\newcommand\nduAlignedValue@helper[3]{%
	\ndu@if@segment@at@least{#1}{#2}{\ndu@minwidthbox{\pgfkeysvalueof{/ndu/cell width}}{\nduFormatSegment{#1}{#2}{#3}}}%
}

\newcommand\nduAlignedValue@internal[8]{%
	% #1 = unit name
	% #2-8 = values
	\nduAlignedValue@helper{#1}{0}{#2}%
	\nduAlignedValue@helper{#1}{1}{#3}%
	\nduAlignedValue@helper{#1}{2}{#4}%
	\nduAlignedValue@helper{#1}{3}{#5}%
	\nduAlignedValue@helper{#1}{4}{#6}%
	\nduAlignedValue@helper{#1}{5}{#7}%
	\nduAlignedValue@helper{#1}{6}{#8}%
}

\NewDocumentCommand\nduHeader{ m O{} }{%
	\begingroup%
	\nduset{unit groups/#1/.cd,#2}%
	\nduAlignedHeader@helper{#1}{0}%
	\nduAlignedHeader@helper{#1}{1}%
	\nduAlignedHeader@helper{#1}{2}%
	\nduAlignedHeader@helper{#1}{3}%
	\nduAlignedHeader@helper{#1}{4}%
	\nduAlignedHeader@helper{#1}{5}%
	\nduAlignedHeader@helper{#1}{6}%
	\endgroup%
}

\NewDocumentCommand\nduAlignedValue@entry{ m > { \SplitArgument { 6 } { . } } m }{%
	% #1 = unit name
	% #2 = values joined by .
	\begingroup%
	\nduset{show=values}%
	\nduAlignedValue@internal{#1}#2%
	\endgroup%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand\ndu@val@or@zero[1]{%
	\IfValueTF{#1}{%
		\ifblank{#1}{%
			0%
		}{%
			#1%
		}%
	}{%
		0%
	}%
}

\newcommand\nduConvertToRepr@helper[4]{%
	% #1 = unit name
	% #2 = repr name
	% #3 = segment
	% #4 = value
	\ndu@if@segment@at@least{#1}{#3}{%
		\csxdef{ndu@repr@#2}{\bigintcalcAdd{\csuse{ndu@repr@#2}}{\ndu@val@or@zero{#4}}}%
		\ndu@if@segment@at@least{#1}{\the\numexpr#3+1\relax}{%
			\csxdef{ndu@repr@#2}{\bigintcalcMul{\csuse{ndu@repr@#2}}{\nduFactor{#1}{\the\numexpr#3+1\relax}}}%
		}%
	}%
}

\newcommand\nduConvertToRepr@internal[9]{%
	% #1 = unit name
	% #2 = repr name
	% #3-9 = values
	\csdef{ndu@repr@#2}{0}%
	\nduConvertToRepr@helper{#1}{#2}{0}{#3}%
	\nduConvertToRepr@helper{#1}{#2}{1}{#4}%
	\nduConvertToRepr@helper{#1}{#2}{2}{#5}%
	\nduConvertToRepr@helper{#1}{#2}{3}{#6}%
	\nduConvertToRepr@helper{#1}{#2}{4}{#7}%
	\nduConvertToRepr@helper{#1}{#2}{5}{#8}%
	\nduConvertToRepr@helper{#1}{#2}{6}{#9}%
}

\NewDocumentCommand\nduConvertToRepr{ m O{} m > { \SplitArgument { 6 } { . } } m }{%
	\nduset{unit groups/#1/.cd,#2}%
	\nduConvertToRepr@internal{#1}{#3}#4%
}

\newcommand\nduFormatRepr@helper[3]{%
	% V = mod(R, F)
	% R = div(R - V, F)
	% #1 = unit name
	% #2 = repr name
	% #3 = segment (F)
	\ndu@if@segment@at@least{#1}{#3}{%
		\ifnum#3=0%
			\csxdef{ndu@repr@#2@result@#3}{\csuse{ndu@repr@#2}}%
		\else%
			\csxdef{ndu@repr@#2@result@#3}{\bigintcalcMod{\csuse{ndu@repr@#2}}{\nduFactor{#1}{#3}}}%
			\csxdef{ndu@repr@#2}{\bigintcalcDiv{\bigintcalcSub{\csuse{ndu@repr@#2}}{\csuse{ndu@repr@#2@result@#3}}}{\nduFactor{#1}{#3}}}%
		\fi%
	}%
}

\NewDocumentCommand\nduResult{ m O{} m }{%
	% #1 = unit name
	% #2 = options
	% #3 = repr name
	\csdef{ndu@repr@tmp #3}{\csuse{ndu@repr@#3}}%
	\nduFormatRepr@helper{#1}{tmp #3}{6}%
	\nduFormatRepr@helper{#1}{tmp #3}{5}%
	\nduFormatRepr@helper{#1}{tmp #3}{4}%
	\nduFormatRepr@helper{#1}{tmp #3}{3}%
	\nduFormatRepr@helper{#1}{tmp #3}{2}%
	\nduFormatRepr@helper{#1}{tmp #3}{1}%
	\nduFormatRepr@helper{#1}{tmp #3}{0}%
	\edef\ndu@nextdelim{\pgfkeysvalueof{/ndu/unit groups/#1/segment separator}}%
	\edef\ndu@delim{}%
	\begingroup%
	\nduset{unit groups/#1/.cd,#2}%
	\ifndualigned%
		\nduset{show=values}%
		\nduAlignedValue@helper{#1}{0}{\csuse{ndu@repr@tmp #3@result@0}}%
		\nduAlignedValue@helper{#1}{1}{\csuse{ndu@repr@tmp #3@result@1}}%
		\nduAlignedValue@helper{#1}{2}{\csuse{ndu@repr@tmp #3@result@2}}%
		\nduAlignedValue@helper{#1}{3}{\csuse{ndu@repr@tmp #3@result@3}}%
		\nduAlignedValue@helper{#1}{4}{\csuse{ndu@repr@tmp #3@result@4}}%
		\nduAlignedValue@helper{#1}{5}{\csuse{ndu@repr@tmp #3@result@4}}%
		\nduAlignedValue@helper{#1}{6}{\csuse{ndu@repr@tmp #3@result@4}}%
	\else%
		\nduFormatValue@helper{#1}{0}{\csuse{ndu@repr@tmp #3@result@0}}%
		\nduFormatValue@helper{#1}{1}{\csuse{ndu@repr@tmp #3@result@1}}%
		\nduFormatValue@helper{#1}{2}{\csuse{ndu@repr@tmp #3@result@2}}%
		\nduFormatValue@helper{#1}{3}{\csuse{ndu@repr@tmp #3@result@3}}%
		\nduFormatValue@helper{#1}{4}{\csuse{ndu@repr@tmp #3@result@4}}%
		\nduFormatValue@helper{#1}{5}{\csuse{ndu@repr@tmp #3@result@4}}%
		\nduFormatValue@helper{#1}{6}{\csuse{ndu@repr@tmp #3@result@4}}%
	\fi%
	\endgroup%
}

\newcommand\nduMath[4]{%
	% #1 = unit name
	% #2 = repr name
	% #3 = operator
	% #4 = value
	\ifcsvoid{ndu@repr@#2}{\csxdef{ndu@repr@#2}{0}}{}%
	\ifthenelse{\equal{#3}{+}}{%
		\nduConvertToRepr{#1}{tmp #2}{#4}%
		\csxdef{ndu@repr@#2}{\bigintcalcAdd{\csuse{ndu@repr@#2}}{\csuse{ndu@repr@tmp #2}}}%
	}{%
		\ifthenelse{\equal{#3}{-}}{%
			\nduConvertToRepr{#1}{tmp #2}{#4}%
			\csxdef{ndu@repr@#2}{\bigintcalcSub{\csuse{ndu@repr@#2}}{\csuse{ndu@repr@tmp #2}}}%
		}{%
			\ifthenelse{\equal{#3}{*}}{%
				\csxdef{ndu@repr@#2}{\bigintcalcMul{\csuse{ndu@repr@#2}}{#4}}%
			}{%
				\ifthenelse{\equal{#3}{/}}{%
					\csxdef{ndu@repr@#2}{\bigintcalcDiv{\csuse{ndu@repr@#2}}{#4}}%
				}{%
					\PackageError{non-decimal-units}{Unrecognized math operator: #3}{Only + - * / are allowed.}%
				}%
			}%
		}%
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\nduset{
	options/.cd,
	british/.code={\input{non-decimal-units.british}},
	danish/.code={\input{non-decimal-units.danish}},
}

\ProcessPgfPackageOptions{/ndu/options}
